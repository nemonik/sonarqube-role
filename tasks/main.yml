---
# tasks file for sonarqube

# Copyright (C) 2020 Michael Joseph Walsh - All Rights Reserved
# You may use, distribute and modify this code under the
# terms of the the license.
#
# You should have received a copy of the license with
# this file. If not, please email <mjwalsh@nemonik.com>

- set_fact:
    images:
      - { repository: "sonarqube", tag: "{{ sonarqube_version }}" }
      - { repository: "alpine", tag: "3.10.2" }
      - { repository: "sameersbn/postgresql", tag: "10-2" }

- name: create /home/{{ ansible_user_id }}/sonarqube
  file:
    path: /home/{{ ansible_user_id }}/sonarqube
    state: directory
  tags:
    - sonarqube

- name: copy to files/sonar.properties to /home/{{ ansible_user_id }}/sonarqube
  copy:
    src: files/sonar.properties
    dest: /home/{{ ansible_user_id }}/sonarqube
  tags:
    - sonarqube

- name: template files into /home/{{ ansible_user_id }}/sonarqube
  template:
    src: templates/{{ item }}.j2
    dest: /home/{{ ansible_user_id }}/sonarqube/{{ item }}
    mode: "u=rwx,g=r,o=r"  
    force: yes
  with_items:
    - "README.MD"
    - "Dockerfile"
    - "dockerfile_build.sh"
  tags:
    - sonarqube

- name: make /home/{{ ansible_user_id }}/sonarqube/dockerfile_build.sh executable
  file: 
    path: /home/{{ ansible_user_id }}/sonarqube/dockerfile_build.sh
    mode: "u=rwx,g=r,o=r"  
  tags:
    - sonarqube

- name: retrieve personal_access_token to access GitLAb
  block:
  - name: get personal_access_token to GitLab
    shell: |
      body_header=$(curl -s -c cookies.txt -i "http://{{ gitlab_host }}:{{ gitlab_port }}/users/sign_in" -s)
      csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /new_user.*?authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
      curl -s -b cookies.txt -c cookies.txt -i "http://{{ gitlab_host }}:{{ gitlab_port }}/users/sign_in" --data "user[login]=root&user[password]={{ vault_gitlab_root_password }}" --data-urlencode "authenticity_token=${csrf_token}" &>/dev/null
      body_header=$(curl -s -H 'user-agent: curl' -b cookies.txt -i "http://{{ gitlab_host }}:{{ gitlab_port }}/profile/personal_access_tokens" -s)
      csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
      body_header=$(curl -s -L -b cookies.txt "http://{{ gitlab_host }}:{{ gitlab_port }}/profile/personal_access_tokens" --data-urlencode "authenticity_token=${csrf_token}" --data 'personal_access_token[name]=golab-generated&personal_access_token[expires_at]=&personal_access_token[scopes][]=api')
      rm cookies.txt
      echo $body_header | perl -ne 'print "$1\n" if /created-personal-access-token"[[:blank:]]value="(.+?)"/' | sed -n 1p
    args:
      chdir: /home/{{ ansible_user_id }}
      executable: /bin/bash
    register: gitlab_personal_access_token_result

  - name: set the gitlab_personal_access_token
    set_fact: gitlab_personal_access_token={{ gitlab_personal_access_token_result.stdout }}

  when: (gitlab_personal_access_token is undefined) and (gitlab_host is defined) and (gitlab_port is defined)
  tags:
    - sonarqube

- name: test for gitlab_personal_access_token
  debug:
    msg: "{{ gitlab_personal_access_token }}"
  tags:
    - sonarqube

- name: integrate with GitLab
  block:
  - name: list GitLab applications
    uri:
      url: http://{{ gitlab_host }}:{{ gitlab_port }}/api/v4/applications
      method: GET
      body_format: form-urlencoded
      return_content: yes
      status_code: 200
      headers:
        PRIVATE-TOKEN: "{{ gitlab_personal_access_token }}"
    register: applications

  - name: delete existing SonarQube application registration
    uri:
      url: http://{{ gitlab_host }}:{{ gitlab_port }}/api/v4/applications/{{ item.id }}
      method: DELETE
      status_code: 204
      headers:
        PRIVATE-TOKEN: "{{ gitlab_personal_access_token }}"
    with_items: "{{ applications.json }}"
    when: item.application_name == "SonarQube"

  - name: configure a SonarQube integration
    uri:
      url: http://{{ gitlab_host }}:{{ gitlab_port }}/api/v4/applications
      method: POST
      body_format: form-urlencoded
      body:
      - [ name, "SonarQube" ]
      - [ redirect_uri, "http://{{ sonarqube_host }}:{{ sonarqube_port}}/oauth2/callback/gitlab" ]
      - [ scopes, "" ]
      return_content: yes
      status_code: 201
      headers:
        PRIVATE-TOKEN: "{{ gitlab_personal_access_token }}"
    register: sonarqube_integration

  - name: initialize sonarqube_gitlab_client_id and sonqrqube_gitlab_client_secret from {{ sonarqube_integration.json }}
    set_fact:
      sonqrqube_gitlab_client_id: "{{ sonarqube_integration.json.application_id }}"
      sonarqube_gitlab_client_secret: "{{ sonarqube_integration.json.secret }}"
  when: (gitlab_host is defined) and (gitlab_port is defined)
  tags:
    - sonarqube

- name: retrieve images, build nemonik/sonarqube:{{ sonarqube_version }} and push into private container registry
  block:
  - name: load {{ images }} from cache
    include_tasks: retrieve_container_image.yml
    loop: "{{ images }}"
    when:
      images_cache_path is defined

  - name: pull {{ images }} container images
    docker_image:
      name: "{{ item.repository }}:{{ item.tag }}"
      source: pull
      timeout: "{{ docker_timeout }}"
    retries: "{{ docker_retries }}"
    delay: "{{ docker_delay }}"
    register: result
    until: result is succeeded
    loop: "{{ images }}"

  - name: build nemonik/sonarqube:{{ sonarqube_version }} and push into private container registry
    docker_image:
      name: nemonik/sonarqube
      tag: "{{ sonarqube_version }}"
      repository: "{{ registry_host }}:{{ registry_port }}/nemonik/sonarqube"
      source: build
      build:
        path: /home/{{ ansible_user_id }}/sonarqube
        pull: yes
        args:
          http_proxy: "{{ http_proxy }}"
          HTTP_PROXY: "{{ http_proxy }}"
          https_proxy: "{{ https_proxy }}"
          HTTPS_PROXY: "{{ https_proxy }}"
          NO_PROXY: "{{ no_proxy }}"
          no_proxy: "{{ no_proxy }}" 
      push: yes
    retries: "{{ docker_retries }}"
    delay: "{{ docker_delay }}"
    register: result
    until: result is succeeded
  tags:
    - sonarqube

- name: spin up SonarQube via Kubernetes
  block:
  - name: template kubernetes resource files into /home/{{ ansible_user_id }}/sonarqube
    template:
      src: templates/sonarqube.yml.j2
      dest: /home/{{ ansible_user_id }}/sonarqube/sonarqube.yml
      mode: "u=rwx,g=r,o=r"
      force: yes 

  - name: is sonarqube running?
    shell: kubectl --kubeconfig=/home/{{ ansible_user_id }}/kubeconfig.yml -n sonarqube get pod | grep Running | wc -l
    register: running

  - name: spin up via kubectl
    shell: kubectl --kubeconfig=/home/{{ ansible_user_id }}/kubeconfig.yml apply -f sonarqube.yml
    args:
      chdir: /home/{{ ansible_user_id }}/sonarqube
    when: running.stdout == "0"
  tags:
    - sonarqube

- name: save {{ images }} to cache
  include_tasks: cache_container_image.yml
  loop: "{{ images }}"
  tags:
    - sonarqube
